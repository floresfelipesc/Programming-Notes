My goal with this is to note my workflow when it comes to programming a solution 
to a problem or toward a goal. I wanted this process to not only to have better
documentation of my work, but also as a means of clearly explaining to people 
who are not familiar with programming what my program does. 

Here is my general approach when wanting to code up a solution to a problem
or with the express of achieving a goal.

Keep in mind that the knowledge of coding languages comes in as being a toolbox
on what actions you can take to build a bridge between the beginning of a process
to the end.

SO now keeping this in mind here's the low-down:
-------------------------------------------------------------------------------------
  1. Define what data you are given, and what data you need to end up 
     with at the end. 

  2. Read the problem and make sure you understand every single aspect of the
     problem. Create questions for yourself on which parts you do not understand 
     and then go one by one answering those questions.
     Some answers may lead to more questions, create questions for those too
     until there is no more ambiguity at all about the problem. 
     A lot of WHAT questions should be expected.

  3. Create a new problem statement repeatedly with this new knowledge until there
     is no ambiguity.  

  4. Come up with a high level solution on how to theoretically solve the problem.

  5. Ask questions on HOW to go about each part of the high level solution.
     Keep asking HOW on every single part of your high level solution until there
     is no more ambiguity at all about the solution.

  6. Formulate the code/functions. AKA Start Coding. For this I recommend pretending
     you have your business logic working and using those high level functions so that
     you can use that as a reference for the high level functions that your Business
     Logic will expose to the UI. The names for these high level functions can be taken
     from the HOW section you have previously written.
     You should aim to have most of your code fall within 
     into Business Logic. 

  7. Starting building your business logic based off of the high level functions you
  pretended to have with private functions doing most of the work and functionality.
  You put those functions together to build the high level function you use within the UI.
  Expose as little as possible to the UI.
     

  8. Have fun! No one way is correct, this is just the way I like to do things.



The previous tactics should at least allow you to arrive at a brute force solution

-------------------------------------------------------------------------------------
  9. Use your knowledge of time complexities and space complexities to guide any
refactoring. 

Look at your current solution and identify its time complexity and space complexity 
among this scale:
O(1)
O(logn) - binary search
O(n) - single for loop - hashtables- two pointers - sliding window 
O(n logn) sorting
O(n^2) double for loop
O(2^n)

Is there any room for improvement in your solution? Is it possible to reach a better
solution using an algorithm or external data structure? 

You will have to identify this and make any improvements possible using your current
solution as a base. 


-------------------------------------------------------------------------------------
Addendum: Updated after my first internship and learning more of how to break
down problems in the real world



  




