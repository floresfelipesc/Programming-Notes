WHAT IT IS: 
A Web API (Application Programming Interface) allows communication between your application
to other applications. 

Interface is the keyword here, is it a user interface 
(not a graphical user interface, a code interface) for your code to utilize other 
applications within your application without having to know all the small intricacies of 
the other applications. 

The interface
API's dumb down their functions for simpler use for you. 

This is how you can interact with sites on the web from your local
application. 

WHY TO USE: 
This allows your applications to function as more than an isolated island on your local
machine. Web API's allow you to interact with the outside world (websites) such as Youtube,
Twitter, Reddit, etc. 
You can even use several API's at once to have 2 different applications
communicate with one another with your code as the middle man. 

You can automate tasks based off of something occuring on a (alerting you of something), 
request data from a site and utilize that data for some other purpose (webscraping), automate
your emails, the possibilities are near endless.

HOW TO USE: 
Every API is different, with their own documentation on how to use them within your code as 
well as restrictions (ex. number of requests you can make per hour). 
There is a lot of overhead with utilizing API's. 
To get started, generally you would search up the desired API, request a "key" which
uniquely identifies you as YOU and gives you access to the desired API, then get to coding. 
(Sidenote: a key is needed to be able to identify and ban bad actors who abuse API's).


BIG PICTURE:
Typically the big picture of using an API looks like this, the same goes for most if not
all apps. This is called the Client - Server Architecture.  
Clients are software or computers that request data from another computer or software,
known as the server. While they are both software/computers, you can distinguish who
is who by the relationship of who is requesting the data and who is sending data.

CLIENT <-----> Internet <------>    Server
(you)           (HTTP)          (ex. Youtube)
(API Client)			(Backend of App)
(API Interface)
(FrontEnd of App)

At base it always looks like this. Sometimes you will have different methods like
simply importing a nuget package that contains libraries to take care of the
the work for you. Sometimes it's as easy as getting a website link (Endpoint) into your
project to get started. It varies.

First you setup the API client settings (Endpoint, Authentication).
Then you make a Request using the API client, the Request is sent to the server via the 
Internet, the server receives and performs whatever the request is, a Response is sent 
from the server to the client, and then you take care of the data you received 
(XML/Json files). 

The requests are typically passed through the internet using HTTP 
requests (HyperText Transfer Protocol) and can get read/write or do certain commands. 
HTTP Requests should be  very familiar to you as you make HTTP requests whenever you access a 
website! (the link)

Whenever you make a request to a server, there will be a status code in response to your
request to let you know how it went. Here are the different types of status codes: 

Within 200 Range - Success
Within 400 Range - CLIENT ERROR (404 is the classic)
Within 500 Range - SERVER ERROR

You must also account for these different responses in your code. Your API request could fail!

-----------------------------------------

DETAILED VERSION:

ENDPOINT is the location where the server resides. It contains data and has 
the logic of how to respond to requests from the client (often a URL).
Depending on the Endpoint, it will also determine which data from the server
you will be using your HTTP Requests on

EX: http://vidly.com/api/customers/1
Here if you send a HTTP GET Request to this endpoint, you would receive a customer
from the list of customers

AUTHENTICATION is what you need to use the client. Sometimes it will be a key or token,
you may need to register for the website and request one depending on how
things are done with their API.

CLIENT is the tool that the API provides in order for you to communicate
with the server. It sends requests to the endpoint. In your application,
you need to initialize Client with the desired EndPoint and Authentication.
You can also modify the Client's options here as well. Then you execute the requests
using the Client

REQUESTS are what you feed into the client for it to know what to requests from the API.
The most typical requests are GET, POST, PUT, DELETE.  

RESPONSE is what is sent back from the server in response to your request. It 
can be succesful or fail (account for both scenarios), and if successful then the
response contains data for you. You now have to process the data into a usable form
for your own purposes. The data will be in XML or JSON format.

DATA PARSING METHOD is what you need in order to restructure the data into a usable form
that the. You need to transform the Json/Xml file into something
easy to work with. This often comes in the form of an external library for you to use
or creating your own data models to contain the Json/XML file data.

-------------------------------------------
The Controllers folder contains all the classes that define the commands that 
you can send to the server. This is the CLIENT INTERFACE.
**Remember that you should always separate business logic from interfaces, so put
all your business logic non-related to the interface in a class library elsewhere.
Here is where you can create your own commands.
NOTE: The commands are Methods with an Attribute defining them as commands. It is in the
Attribute declaration that you can give the command a specific name. There are conventions
for this. These names you would use if you want to call these commands through the http in 
your browser.
----------------------------------------------------------------------------------------------
OPTIONAL
Minimal API's do away with the whole Controllers folder, and just set you up with 
the standard Program.cs file. By default it will have some code that defines action the 
example command will make, and the example command creation. You can get rid of these as
they are merely to show an example. Now instead you will create your commands in the 
Program.cs file, and have the business logic for those commands elsewhere in a class library.
An example of how this would look like is:

app.MapGet("/nameOfMyCommand", Greeting);  |
                                           |This is all in between two lines
private static string Greeting(){          |app.UseHttpsRedirection();
  return "Hello World";                    |app.Run();
}                                          |

When to use full API vs Minimal API?
When the complexity of the API warrents a full API. Typically for individual projects 
a Minimal API is fine, I would advice always trying to get away with using the 
simpler Minimal API's for simplicity sake. 
-------------------------------------------------------------------------------------------
How to call on APIs in your projects? 
The main take aways is that you need an Endpoint URL, Authorization, Client, Request, Response, 
and Data Parser for API communication. 

You will need some NuGet Packages to process the Client, this can be up to you.

1. You will need to setup an HttpClient to order to communicate from your application
with the API. This also means setting up the Client's options, including the authorization
and what endpoint to use

EX: 
string url = "https://xkcd.com/info.0.json";
HttpClientOptions options = new HttpClientOptions(url, authToken);
HttpClient client = new HttpClient(options);

2. Then you would choose and excecute a type of request. This also means setting 
up the Response data type and knowing how to call whichever method
you need from the api

EX: 
//First you open a gateway to the site in the form of a GET request
//When you get a response you open a gateway to a site, wrapping the using
//keyword around the operation ensures cleanup of the gateway
using (HttpResponseMessage response = await client.Execute("get");)
{ 
    //a response can be a success or failure, prepare for both
    //For Success
   3.Success or Failure prep
    if (response.IsSuccessStatusCode)
    {
        //Next you do whatever operation you want, in this case we read
        //and convert the json data into our custom built ComicModel class
        //where ReadAsAsync maps the json data to our Comic Model properties
       4. Data Parsing
        ComicModel comic = await response.Content.ReadAsAsync<ComicModel>();
        
        return comic;
    }
    //For Failure
    else
    {
        throw new Exception(response.ReasonPhrase);
    }
}

Then the data is extracted from the url, and you can do what you want with it!
Have fun!
